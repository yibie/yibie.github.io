<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TIL - Space Looming</title>
    <link>http://localhost:1313/categories/til/</link>
    <description>Space Looming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
    
    
    <lastBuildDate>Tue, 01 Oct 2024 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="http://localhost:1313/categories/til/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TIL</title>
      <link>http://localhost:1313/til/</link>
      <pubDate>Tue, 01 Oct 2024 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/til/</guid>
      <description>&lt;p&gt;TIL = Today I learned&lt;/p&gt;
&lt;h1 id=&#34;2025-01-21-emacs-中综合使用-keep-lines-和-flush-lines-过滤多行文本&#34;&gt;2025-01-21 Emacs 中综合使用 keep-lines 和 flush-lines 过滤多行文本&lt;/h1&gt;
&lt;p&gt;如果不想写正则表达式，可以多次使用 keep-lines 和 flush-lines 来达到筛选包含某些关键字的文本行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;keep-lines&lt;/code&gt; 的意思就是，保留你输入关键字的文本行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;flush-lines&lt;/code&gt; 的意思是，排除你输入关键字的文本行。&lt;/p&gt;
&lt;p&gt;由于这两个命令，运行之后会直接修改文本内容，因此不要直接用于正在使用的业务文件中。&lt;/p&gt;
&lt;h1 id=&#34;2025-01-20-实施加载-emacs-的包文件&#34;&gt;2025-01-20 实施加载 Emacs 的包文件&lt;/h1&gt;
&lt;p&gt;运行这个命令： &lt;code&gt;load-library&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在调试开发 Emacs 的第三方包时，运行这一个命令可以避免每一次每一次修改都重启 Emacs。&lt;/p&gt;
&lt;h1 id=&#34;2025-01-02-让-org-mode-的-tag-一直处于-emacs-窗口的最右方&#34;&gt;2025-01-02 让 org-mode 的 tag 一直处于 Emacs 窗口的最右方&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(add-to-list &amp;#39;font-lock-extra-managed-props &amp;#39;display)
(font-lock-add-keywords &amp;#39;org-mode
                        `((&amp;#34;^.*?\\( \\)\\(:[[:alnum:]_@#%:]+:\\)$&amp;#34;
                           (1 `(face nil
                                     display (space :align-to (- right ,(org-string-width (match-string 2)) 3)))
                              prepend))) t)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;2024-12-17-加快-macos-里光标的移动速度&#34;&gt;2024-12-17 加快 macOS 里光标的移动速度&lt;/h1&gt;
&lt;p&gt;找到「系统设置（Sytem Setting」里的「键盘（Keyboard）」，将里面的「Key repeat rate」调向 fast 以及「Delay until repeat」调向 short。&lt;/p&gt;
&lt;p&gt;效果拔群！&lt;/p&gt;
&lt;h1 id=&#34;2024-12-17-使用shift--方向键在-emacs-calendar-里自由选择日期&#34;&gt;2024-12-17 使用「Shift + 方向键」在 Emacs Calendar 里自由选择日期&lt;/h1&gt;
&lt;p&gt;在 org-mode 里，按下 C-c C-s 会出现一个日历视图（Emacs Calendar），可以让人直接输入 +1、+2 这种方式来选择未来的日期。&lt;/p&gt;
&lt;p&gt;这种方式不够直观、方便，今天发现，在唤出日历视图后，可以直接按着 Shift + 上下左右方向键，将可以自由移动 Emacs Calendar 里的光标，从从容容地选择日日期。&lt;/p&gt;
&lt;h1 id=&#34;2024-11-24-ant-design-组件基本分类&#34;&gt;2024-11-24 Ant Design 组件基本分类&lt;/h1&gt;
&lt;h2 id=&#34;架构设计&#34;&gt;架构设计&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;分层
&lt;ul&gt;
&lt;li&gt;基础组件&lt;/li&gt;
&lt;li&gt;样式体系&lt;/li&gt;
&lt;li&gt;复合组件&lt;/li&gt;
&lt;li&gt;业务组件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解耦
&lt;ul&gt;
&lt;li&gt;对于每个组件都要定义：样式、ts 类型、基础操作、工具方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;响应式设计&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;状态管理&#34;&gt;状态管理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;状态管理
&lt;ul&gt;
&lt;li&gt;全局状态：在 react 使用 Context、useSyncExternailStore&lt;/li&gt;
&lt;li&gt;局部状态：受控组件，非受控组件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;样式体系与主题设计&#34;&gt;样式体系与主题设计&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Color Tokens : 颜色色值系统&lt;/li&gt;
&lt;li&gt;样式模块化方案：css-in-js、emotion（建议试一试）、styled-compontents&lt;/li&gt;
&lt;li&gt;样式优先级与覆盖：控制样式优先级&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2024-11-06-给-emacs-打-patch&#34;&gt;2024-11-06 给 Emacs 打 Patch&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;来源&lt;/strong&gt;: Telegram 群组 “Emacs_CN Lite 轻聊版” @Lucius_Chen&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;/opt/homebrew/Library/Taps/d12frosted/homebrew-emacs-plus/Formula/&lt;/code&gt; 下的 &lt;code&gt;emacs-plus@31.rb&lt;/code&gt; 文件需要修改 &lt;code&gt;Path&lt;/code&gt; 栏的 &lt;code&gt;local_path&lt;/code&gt; 和 &lt;code&gt;commit&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果需要打 patch，可以将 patch 文件放在：
&lt;code&gt;/opt/homebrew/Library/Taps/d12frosted/homebrew-emacs-plus/patches/emacs-31&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;2024-11-05-vim-命令---scroll--move&#34;&gt;2024-11-05 Vim 命令 - Scroll &amp;amp; Move&lt;/h1&gt;
&lt;h2 id=&#34;scroll&#34;&gt;Scroll&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;滚动一页: &lt;code&gt;C-f&lt;/code&gt; / &lt;code&gt;C-b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;滚动半页: &lt;code&gt;C-d&lt;/code&gt; / &lt;code&gt;C-u&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;滚动一行: &lt;code&gt;C-e&lt;/code&gt; / &lt;code&gt;C-y&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;navigation&#34;&gt;Navigation&lt;/h2&gt;
&lt;h3 id=&#34;以词定位&#34;&gt;以词定位&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;下一个单词的开头: &lt;code&gt;w&lt;/code&gt; / &lt;code&gt;W&lt;/code&gt;（&lt;code&gt;W&lt;/code&gt; 更加直接）&lt;/li&gt;
&lt;li&gt;当前单词的末尾: &lt;code&gt;e&lt;/code&gt; / &lt;code&gt;E&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;上一个单词的开头: &lt;code&gt;b&lt;/code&gt; / &lt;code&gt;B&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;以行定位&#34;&gt;以行定位&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;去到行首: &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;去到行尾: &lt;code&gt;$&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;去到第一个非空字符: &lt;code&gt;^&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;去到最后一个非空字符: &lt;code&gt;g_&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;以屏定位&#34;&gt;以屏定位&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;去到当前屏幕中的第一行: &lt;code&gt;H&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;去到当前屏幕的中间一行: &lt;code&gt;M&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;去到当前屏幕的最后一行: &lt;code&gt;L&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;2024-10-27-解决一个神出鬼没的-bug&#34;&gt;2024-10-27 解决一个神出鬼没的 Bug&lt;/h1&gt;
&lt;h2 id=&#34;一句话说明问题&#34;&gt;一句话说明问题&lt;/h2&gt;
&lt;p&gt;升级 &lt;code&gt;org-zettel-ref-mode&lt;/code&gt; 的数据库格式导致加载数据库的函数无法读取正确的数据库，结果引发内存错误链。报错信息仅显示 “let*: End of file during parsing”，未提供具体细节。&lt;/p&gt;
&lt;h2 id=&#34;辛苦的过程&#34;&gt;辛苦的过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;起初以为是代码括号匹配问题，检查后无果。&lt;/li&gt;
&lt;li&gt;Emacs 群中请教后仍未找到问题。&lt;/li&gt;
&lt;li&gt;尝试将所有 &lt;code&gt;let*&lt;/code&gt; 改为 &lt;code&gt;let&lt;/code&gt;，但问题依旧。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;灵光一闪&#34;&gt;灵光一闪&lt;/h2&gt;
&lt;p&gt;总结经验后怀疑是别处问题。直接运行导致报错的函数，终于获得详细的错误报告，从而顺利解决问题。&lt;/p&gt;
&lt;h2 id=&#34;问题分析&#34;&gt;问题分析&lt;/h2&gt;
&lt;p&gt;关键错误：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;read&lt;/code&gt; 函数失败返回 &lt;code&gt;nil&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;后续试图从 &lt;code&gt;nil&lt;/code&gt; 中获取 &lt;code&gt;:entries&lt;/code&gt;，导致问题传递。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;调用链分析：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;org-zettel-ref-db-load()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;内部 &lt;code&gt;let*&lt;/code&gt; 执行失败，触发错误。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;2024-10-20-让大陆用户顺利访问部署在-vercel-上的网站程序&#34;&gt;2024-10-20 让大陆用户顺利访问部署在 Vercel 上的网站程序&lt;/h1&gt;
&lt;p&gt;在域名服务商的 DNS 记录中使用：
&lt;code&gt;cname-china.vercel-dns.com&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;2024-10-17-使用-emacs-的-register-方便工作&#34;&gt;2024-10-17 使用 Emacs 的 Register 方便工作&lt;/h1&gt;
&lt;p&gt;观看视频 &lt;em&gt;Emacs: Store anything with registers and bookmarks&lt;/em&gt; 后，更清楚 Register 的作用。&lt;/p&gt;
&lt;h2 id=&#34;register-的特点&#34;&gt;Register 的特点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;临时保存：
&lt;ul&gt;
&lt;li&gt;光标位置&lt;/li&gt;
&lt;li&gt;窗口布局&lt;/li&gt;
&lt;li&gt;文件（需自定义命令）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内容会随 Emacs 重启或被覆盖而丢失。&lt;/li&gt;
&lt;li&gt;快速覆盖机制适合处理临时性任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;register-与-bookmark-的结合&#34;&gt;Register 与 Bookmark 的结合&lt;/h2&gt;
&lt;p&gt;Register 适合临时任务，Bookmark 可用于长期保存，高效结合使用能提升工作效率。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;2024-10-16-不移动光标的情况下滚动行&#34;&gt;2024-10-16 不移动光标的情况下滚动行&lt;/h1&gt;
&lt;p&gt;Emacs 内置了两个命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scroll-up-line&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scroll-down-line&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;#https://www.v2ex.com/t/1087594#reply28 2024-10-07 软件工程的性能测试
所有软件工程都应通过 Profiler 测试性能。Emacs 中可以通过以下命令实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动性能测试: &lt;code&gt;M-x profiler-start&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;选择 CPU 消耗、内存消耗，或 CPU+内存消耗。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
      
      
      <category>TIL</category>
      
      
    </item>
    
  </channel>
</rss> 