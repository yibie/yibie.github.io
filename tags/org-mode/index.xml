<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Org-Mode - Space Looming</title>
    <link>https://www.gtdstudy.com/tags/org-mode/</link>
    <description>Recent content in Org-Mode on Space Looming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
    
    
    <lastBuildDate>Sat, 21 Dec 2024 13:00:00 +0800</lastBuildDate>
    
    <atom:link href="https://www.gtdstudy.com/tags/org-mode/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>用 AI 辅助开发的经验二三则(3)</title>
      <link>https://www.gtdstudy.com/posts/learned-from-using-ai-develop-software-3/</link>
      <pubDate>Sat, 21 Dec 2024 13:00:00 +0800</pubDate>
      
      <guid>https://www.gtdstudy.com/posts/learned-from-using-ai-develop-software-3/</guid>
      <description>&lt;p&gt;早两日，我发布了 org-supertag，一个新的 Emacs 第三方扩展包。本来这个项目，我计划是 3-5 天完成，结果花费的时间比预计要超出 3 倍有多。不禁让我想起了一个段子：不管下属报的时间期限多长，总之乘以 3 倍就对了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多出来的时间花在哪儿了？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先简单介绍 org-supertag 是干嘛的，它借鉴了 Tana 强大的 Super Tag 功能，增强 Org-mode 原本的标签系统。强大这个描述，转换视角，往往意味着复杂。不过对于我来说，梳理 Tana 的功能，以及理清它概念之间的&lt;a href=&#34;https://emacs-china.org/t/emacs-tana-supertag/28407/4&#34;&gt;关系&lt;/a&gt;，并没有花我太长时间。&lt;/p&gt;
&lt;p&gt;花费较多的时间的一个地方，是设计决策、测试设计。&lt;/p&gt;
&lt;p&gt;囿于 Emacs 本身是独立的，它的图形表达能力，和交互方式都有自己的独特性，我花了不少时间在探索它们的边界上——我最终实现了一个配置 Tag 模板的可视化面板，操作倒不怎么麻烦，但开发量巨大，功能只是设定标签名字，以及定义属于它的属性段而已，代码行数突破 1k，很夸张。一想到以后还要维护这么一 &lt;del&gt;坨&lt;/del&gt; 堆代码，头皮发麻，果断放弃。&lt;/p&gt;
&lt;p&gt;我最后回归使用底栏菜单 + 选项的方式。这种方式的优点上实现快，代码简单，但缺点也很明显，如果需要的操作较多，那么操作步骤会非常多，麻烦到我自己都不想用。我不得不绞尽脑汁，思考交互流程，一点一点的测试和改进。包括我刚才提到的，大大小小的测试方案，有差不多 5 种。不论是思考，还是实现，都花费不少时间。&lt;/p&gt;
&lt;p&gt;另外花费较多的地方，是重构。&lt;/p&gt;
&lt;p&gt;既不意外，又很意外的，意外总归会来。我之所以要放弃 Demo，是因为它完全以文件为储存，这种方式优点很多，但缺点是数据量一大，速度就会全方位的下滑，甚至到了一个人难以忍受的程度。不管是 Obisidan 还是 Emacs 上大名鼎鼎的 Org-roam，都存在这样的问题，用户的抱怨，我见过不少。基于这个理由重构，我觉得没问题。但之后的重构，多多少少我觉得有点乱来——我一共重构了 6 版……&lt;/p&gt;
&lt;p&gt;刚才谈到 Demo，这算是第一版。然后我突然间迷信起 AI 能够搞定一切的狗屁说法来，我通过 NotebookLM 提炼 Tana 的功能特性，并总结成产品文档，然后让 Windsurf 帮我完整实现。果然没能达到预期，产生了一堆代码，但是无法通过实际测试。这花了 1 天时间。然后接下来，我又用 Cursor 用同样的流程，重复一次，也还是得到一堆无法正确执行的代码，又花了 1 天。&lt;/p&gt;
&lt;p&gt;但我不觉得 Cursor 和 Windsurf 要为重构失败负上主要责任。最主要的责任还在自己身上。因为心浮气躁，想着赶工，根本就没有静下心来，认真阅读 AI 提交的代码，理顺其中的节点。有一点点 Bug，就想马上推倒重来，反而陷入不断重复实现基础功能的循环里，中间浪费的时间更多。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用 AI 辅助开发的经验二三则(2)</title>
      <link>https://www.gtdstudy.com/posts/learned-from-using-ai-develop-software-2/</link>
      <pubDate>Thu, 07 Nov 2024 14:00:00 +0800</pubDate>
      
      <guid>https://www.gtdstudy.com/posts/learned-from-using-ai-develop-software-2/</guid>
      <description>&lt;p&gt;最新发布的 org-zettel-ref-mode （以下简称 OZR）版本号从 0.3.3 跳到 0.4，在这一轮冲刺中，我实现了比之前更加复杂的功能，更多的代码行数，更加复杂的结构。而所花费的时间，是过去的三分之一，我认为自己取得了可喜的进步。&lt;/p&gt;
&lt;p&gt;OZR 新的版本，增加了一个新功能，用于管理引用来源文件的可视化面板。这句话看上去很简单，但背后的工作量并不小。前端改一个词，足以让后端跑断腿。出现产品经理被砍这样的新闻，也不必奇怪了。&lt;/p&gt;
&lt;p&gt;可视化面板，是很多产品里常见的特性，它的功能就是，让用户更加舒服地查看、管理特定的对象。在 OZR 里，其管理对象是，一个个被充当引用来源的参考文件。&lt;/p&gt;
&lt;p&gt;如果让你来设计这个面板，你觉得第一个问题会是什么？我一开始的反映是，文件应该以什么样的方式进行展示？但实际上，在我真正着手开发时，真正重要的问题是： &lt;strong&gt;在面板里展示的数据源来自哪里?&lt;/strong&gt; &lt;strong&gt;在数据源发生了改动之后，如何确保原来的文件映射关系不变？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;继续追问这两个问题，会发现，从工程上需要实现：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将原本非格式化的数据转换成格式化数据，保存到数据库中，面板访问数据库才能既快又好地展现文件信息&lt;/li&gt;
&lt;li&gt;由于用户会在面板上编辑文件信息，因此面板上更新的数据，需要同步到数据库对应的字段中，进行信息层面的对齐，这样子才能确保面板在重新加载之后不会出现错误的信息&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从这 2 个问题继续追问，就会出现大量需要实现的工程细节。但最重要的一个问题是，需要使用一个怎么样的数据库，才能够满足以上需求。再深挖这个问题，就是数据库应当使用什么结构，能够满足当前的业务需求？再追问这个问题，就会回到业务层面上，实际业务的情景是什么？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;设计数据库之前需要先探明业务情景&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在没弄清楚实际业务发生的情形之前，我所尝试的各种实现数据库的方法，都是错的，各种 Bug 层出不穷，按下葫芦浮起瓢。最后我冷静下来，深究原因——保存与存取，总是出现问题。我得感谢之前&lt;a href=&#34;https://www.gtdstudy.com/posts/learned-from-using-ai-develop-software/&#34;&gt;开发的经验里&lt;/a&gt;，让我牢牢记住一个原则：一个 Bug 如果修改 3 次都不成功，一定要转换思路，不要继续重复原来的方法。&lt;/p&gt;
&lt;p&gt;所以，我和 AI 对话，对实际的业务情景进行分析，寻找最适合的数据库结构。这个问题决定了数据库的读写方法——&lt;/p&gt;
&lt;p&gt;我：
overview-id 一定对应一个 ref-id (必需关系) 也未必会有对应的一个 ref-id，因为有的 overview 文件不是从 ref 源文件夹中的文件创建。不过，从严格意义上来讲，一个 overview 文件，必须对应有一个 source 文件&lt;/p&gt;
&lt;p&gt;AI：
明白了,让我重新梳理这个关系:
从数据库角度:
ref-id 可以没有对应的 overview-id
overview-id 可以没有对应的 ref-id
但如果存在映射,则是一对一的关系
从业务逻辑角度:
overview 文件必须对应一个 source 文件(业务规则)
但这个对应关系可能还未在数据库中建立(数据状态)
映射关系的建立是一个渐进的过程
Map 表的职责:
记录已建立的映射关系
确保映射的一对一性
不强制要求所有实体都必须有映射
但提供检查机制发现&amp;quot;孤立&amp;quot;的 overview
这样的理解更准确了吗？&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss> 