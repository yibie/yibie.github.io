<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding - Space Looming</title>
    <link>https://www.gtdstudy.com/tags/coding/</link>
    <description>Space Looming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
    
    
    <lastBuildDate>Sat, 21 Dec 2024 13:00:00 +0800</lastBuildDate>
    
    <atom:link href="https://www.gtdstudy.com/tags/coding/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>用 AI 辅助开发的经验二三则(3)</title>
      <link>https://www.gtdstudy.com/posts/learned-from-using-ai-develop-software-3/</link>
      <pubDate>Sat, 21 Dec 2024 13:00:00 +0800</pubDate>
      
      <guid>https://www.gtdstudy.com/posts/learned-from-using-ai-develop-software-3/</guid>
      <description>&lt;p&gt;早两日，我发布了 org-supertag，一个新的 Emacs 第三方扩展包。本来这个项目，我计划是 3-5 天完成，结果花费的时间比预计要超出 3 倍有多。不禁让我想起了一个段子：不管下属报的时间期限多长，总之乘以 3 倍就对了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多出来的时间花在哪儿了？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先简单介绍 org-supertag 是干嘛的，它借鉴了 Tana 强大的 Super Tag 功能，增强 Org-mode 原本的标签系统。强大这个描述，转换视角，往往意味着复杂。不过对于我来说，梳理 Tana 的功能，以及理清它概念之间的&lt;a href=&#34;https://emacs-china.org/t/emacs-tana-supertag/28407/4&#34;&gt;关系&lt;/a&gt;，并没有花我太长时间。&lt;/p&gt;
&lt;p&gt;花费较多的时间的一个地方，是设计决策、测试设计。&lt;/p&gt;
&lt;p&gt;囿于 Emacs 本身是独立的，它的图形表达能力，和交互方式都有自己的独特性，我花了不少时间在探索它们的边界上——我最终实现了一个配置 Tag 模板的可视化面板，操作倒不怎么麻烦，但开发量巨大，功能只是设定标签名字，以及定义属于它的属性段而已，代码行数突破 1k，很夸张。一想到以后还要维护这么一 &lt;del&gt;坨&lt;/del&gt; 堆代码，头皮发麻，果断放弃。&lt;/p&gt;
&lt;p&gt;我最后回归使用底栏菜单 + 选项的方式。这种方式的优点上实现快，代码简单，但缺点也很明显，如果需要的操作较多，那么操作步骤会非常多，麻烦到我自己都不想用。我不得不绞尽脑汁，思考交互流程，一点一点的测试和改进。包括我刚才提到的，大大小小的测试方案，有差不多 5 种。不论是思考，还是实现，都花费不少时间。&lt;/p&gt;
&lt;p&gt;另外花费较多的地方，是重构。&lt;/p&gt;
&lt;p&gt;既不意外，又很意外的，意外总归会来。我之所以要放弃 Demo，是因为它完全以文件为储存，这种方式优点很多，但缺点是数据量一大，速度就会全方位的下滑，甚至到了一个人难以忍受的程度。不管是 Obisidan 还是 Emacs 上大名鼎鼎的 Org-roam，都存在这样的问题，用户的抱怨，我见过不少。基于这个理由重构，我觉得没问题。但之后的重构，多多少少我觉得有点乱来——我一共重构了 6 版……&lt;/p&gt;
&lt;p&gt;刚才谈到 Demo，这算是第一版。然后我突然间迷信起 AI 能够搞定一切的狗屁说法来，我通过 NotebookLM 提炼 Tana 的功能特性，并总结成产品文档，然后让 Windsurf 帮我完整实现。果然没能达到预期，产生了一堆代码，但是无法通过实际测试。这花了 1 天时间。然后接下来，我又用 Cursor 用同样的流程，重复一次，也还是得到一堆无法正确执行的代码，又花了 1 天。&lt;/p&gt;
&lt;p&gt;但我不觉得 Cursor 和 Windsurf 要为重构失败负上主要责任。最主要的责任还在自己身上。因为心浮气躁，想着赶工，根本就没有静下心来，认真阅读 AI 提交的代码，理顺其中的节点。有一点点 Bug，就想马上推倒重来，反而陷入不断重复实现基础功能的循环里，中间浪费的时间更多。&lt;/p&gt;
&lt;p&gt;假如回到那一天，我会对自己说，好好审代码，别他妈的老想着重新再来。&lt;/p&gt;
&lt;p&gt;另外的重构，则源自于数据库层面，这部分的重构我觉得是有效重构。有道是，一生二，二生三，三生万物。与 org-zettel-ref-mode 相比，org-superta 的数据对象实际上有 4 个：Node、Tag、Field、Field Value。第一次重构，就是因为每一个对象都使用一个表，在测试当中，明显感到性能很差，仅仅存了 10 个数据对象，但操作需要 1 秒，甚至超过 1 秒。在当时，我认为必须到了回炉重造的时候了。&lt;/p&gt;
&lt;p&gt;所以，不知不觉中，org-supertag 的重构版本很快叠到第 5 版。在这个版本里，我将基础的功能都进行了实现，但发现数据保存和检索还是有问题。而由于之前迭代的版本很多，函数名混乱，函数之间的调用链也相当混乱。中间加入的缓存、事件系统更让整个代码看上去冗杂不堪——此时，数据库的保存又有了问题，努力排查了很久，都无法彻底理清。没办法，只能再次重构。&lt;/p&gt;
&lt;p&gt;幸运的是，由于 v5 的代码已经将基础功能实现了，因此重新从功能定义出发，参考之前的实现，一点点地将一个个函数都老老实实地实现出来。一边实现，一边针对具体的功能，用简单的测试代码进行测试，整个过程非常顺利，只用了我 2 天半的事件，就主体框架和基础功能全部都实现了。而且程序的运行非常流畅。&lt;/p&gt;
&lt;p&gt;还有一个隐形的时间杀手，就是测试。&lt;/p&gt;
&lt;p&gt;测试是贯穿在整个重构的过程中的。在令 org-zettel-ref-mode 可以拥有稳健的数据库时，我正是靠着测试以及测试用例，来找出函数之间不配合的地方，一个一个清理，终于才搞定。而这一次，我迷信之前的经验，凡事都上一个测试用例，结果中间浪费了很多时间，在实际代码和测试结果之间来回跑，陷入了一种恶性循环里。&lt;/p&gt;
&lt;p&gt;我发现，不应该马上就上测试用例，应该在单个功能与函数已经稳定运行的情况下，在编写测试用例进行整体的测试（主要用于测试边缘情况，多个函数之间运行是否会引起冲突），否则它对实际的程序运行无法起到指导作用。所以，我不应该在实现一个模块的时候，就马上上一个测试用例。实际上我应该在实现一个组件的时候，简单跑一个测试代码，看功能是否可以正常运行就可以了。&lt;/p&gt;
&lt;p&gt;直到最后一次迭代，我才终于改变了做法，终于在改完最后一点 bug（自认为的），就将 org-supertag 发布在 Github 上，然后我在 Reddit 的 r/org-mode 上发帖介绍，很快吸引了不少 upvote，还有一些人在评论里兴奋的称赞。本文距离正式发布大约 24 小时，Github 上已经有 20 来个 Star，比之前的 org-zettel-ref-mode 快多了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于重构的一点体会&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;没有结构性的重大缺陷，不要随便进行完全的重构。我认为我经历的 6 次重构中，只有第一次，第五次，第六次算是有效重构，中间的几次基本属于无效重构——这些重构很大程度上，只是在发泄焦躁的情绪，而不是真正在实现项目。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重构的目的，是去芜存菁，留下有效的代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在日常工程中，针对一段函数进行小重构，是很正常的，一般来说也值得鼓励。因为通常小的重构，往往会将代码的结构梳理得更加清晰，也会查缺不漏。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在是否重构之前，进行测试是有必要的。但马上就上完整的测试用例，是没有必要的，而且也会产生很大的时间浪费，因为此时函数与功能并非处于一个相对稳定的状态，此时用测试用例进行测试，只会误导自己，将整个项目的构建引导向歪路。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;另外一些有用的经验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先用 Demo 探索产品可行性，这个做法值得保持。&lt;/p&gt;
&lt;p&gt;尽管我认为，Emacs 和 Org-mode 已经拥有良好的基础设施，足以实现 Tana 上便利的功能，然而 Org-mode 本身的标签功能是非常薄弱的，为了弥合理论与实践之间的鸿沟，我花了 2 天时间，实现了一个功能完整的 Demo。因为 Demo 实现过程十分顺利，让我误判了正式实现 org-supertag 的难度，另外一方面，我认为在仅凭理论判断的前提下，是非常必要实现一个 Demo 来验证想法的可行性。&lt;/p&gt;
&lt;p&gt;这一个做法，来自任天堂开发《塞尔达传说：旷野之息》的经验，在团队正式开发一个 3D 版本之前，他们首先实现了一个功能完备的 2D 的版本，里面的林克是可以跳跃、跑步的，地图也已经大体设计好。因此《塞尔达传说：旷野之息》的开发过程是比较顺利的， 之所以会延期发布，主要还是为了 Switch 进行更多的优化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最后的回顾&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;与 org-zettel-ref-mode 相比 org-supertag 是一个更加复杂的项目，无论功能数量，工程量还有设计方面的考虑，都要更加复杂，但实现的时间更短了。自认为，在使用 AI 辅助开发的能力上，是有比较大的提高的。之前总结的经验，在这一次开发当中，帮了大忙，帮我在一个更加合理的时间段里及时止损。&lt;/p&gt;
&lt;p&gt;另外，从 org-zettel-ref-mode 和 org=supertag 这两个项目的实现，也终于确认了自己的能力，在用户体验、产品设计方面的思路，是有一定可取之处的。可以说，我现在比之前更有自信。&lt;/p&gt;

      </description>
      
      
      <category>write</category>
      
      
    </item>
    
    <item>
      <title>用 AI 辅助开发的经验二三则(2)</title>
      <link>https://www.gtdstudy.com/posts/learned-from-using-ai-develop-software-2/</link>
      <pubDate>Thu, 07 Nov 2024 14:00:00 +0800</pubDate>
      
      <guid>https://www.gtdstudy.com/posts/learned-from-using-ai-develop-software-2/</guid>
      <description>&lt;p&gt;最新发布的 org-zettel-ref-mode （以下简称 OZR）版本号从 0.3.3 跳到 0.4，在这一轮冲刺中，我实现了比之前更加复杂的功能，更多的代码行数，更加复杂的结构。而所花费的时间，是过去的三分之一，我认为自己取得了可喜的进步。&lt;/p&gt;
&lt;p&gt;OZR 新的版本，增加了一个新功能，用于管理引用来源文件的可视化面板。这句话看上去很简单，但背后的工作量并不小。前端改一个词，足以让后端跑断腿。出现产品经理被砍这样的新闻，也不必奇怪了。&lt;/p&gt;
&lt;p&gt;可视化面板，是很多产品里常见的特性，它的功能就是，让用户更加舒服地查看、管理特定的对象。在 OZR 里，其管理对象是，一个个被充当引用来源的参考文件。&lt;/p&gt;
&lt;p&gt;如果让你来设计这个面板，你觉得第一个问题会是什么？我一开始的反映是，文件应该以什么样的方式进行展示？但实际上，在我真正着手开发时，真正重要的问题是： &lt;strong&gt;在面板里展示的数据源来自哪里?&lt;/strong&gt; &lt;strong&gt;在数据源发生了改动之后，如何确保原来的文件映射关系不变？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;继续追问这两个问题，会发现，从工程上需要实现：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将原本非格式化的数据转换成格式化数据，保存到数据库中，面板访问数据库才能既快又好地展现文件信息&lt;/li&gt;
&lt;li&gt;由于用户会在面板上编辑文件信息，因此面板上更新的数据，需要同步到数据库对应的字段中，进行信息层面的对齐，这样子才能确保面板在重新加载之后不会出现错误的信息&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从这 2 个问题继续追问，就会出现大量需要实现的工程细节。但最重要的一个问题是，需要使用一个怎么样的数据库，才能够满足以上需求。再深挖这个问题，就是数据库应当使用什么结构，能够满足当前的业务需求？再追问这个问题，就会回到业务层面上，实际业务的情景是什么？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;设计数据库之前需要先探明业务情景&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在没弄清楚实际业务发生的情形之前，我所尝试的各种实现数据库的方法，都是错的，各种 Bug 层出不穷，按下葫芦浮起瓢。最后我冷静下来，深究原因——保存与存取，总是出现问题。我得感谢之前&lt;a href=&#34;https://www.gtdstudy.com/posts/learned-from-using-ai-develop-software/&#34;&gt;开发的经验里&lt;/a&gt;，让我牢牢记住一个原则：一个 Bug 如果修改 3 次都不成功，一定要转换思路，不要继续重复原来的方法。&lt;/p&gt;
&lt;p&gt;所以，我和 AI 对话，对实际的业务情景进行分析，寻找最适合的数据库结构。这个问题决定了数据库的读写方法——&lt;/p&gt;
&lt;p&gt;我：
overview-id 一定对应一个 ref-id (必需关系) 也未必会有对应的一个 ref-id，因为有的 overview 文件不是从 ref 源文件夹中的文件创建。不过，从严格意义上来讲，一个 overview 文件，必须对应有一个 source 文件&lt;/p&gt;
&lt;p&gt;AI：
明白了,让我重新梳理这个关系:
从数据库角度:
ref-id 可以没有对应的 overview-id
overview-id 可以没有对应的 ref-id
但如果存在映射,则是一对一的关系
从业务逻辑角度:
overview 文件必须对应一个 source 文件(业务规则)
但这个对应关系可能还未在数据库中建立(数据状态)
映射关系的建立是一个渐进的过程
Map 表的职责:
记录已建立的映射关系
确保映射的一对一性
不强制要求所有实体都必须有映射
但提供检查机制发现&amp;quot;孤立&amp;quot;的 overview
这样的理解更准确了吗？&lt;/p&gt;
&lt;p&gt;我：
在我们的场景里，一个 ref-id 对应一个 overview-id。&lt;/p&gt;
&lt;p&gt;AI：
啊,抱歉我理解错了。是的,在我们的场景中是一对一的关系。
让我们重新分析 Map 表的工作机制:
一对一映射的特点:
每个 ref-id 只能对应一个 overview-id
每个 overview-id 也只能对应一个 ref-id
这意味着映射是双向唯一的
Map 表的约束:
创建新映射前需要检查 ref-id 是否已有映射
创建新映射前需要检查 overview-id 是否已被映射
更新映射时需要保证双向唯一性
删除映射时需要同时解除双向关联
查询优化:
可以通过 ref-id 直接找到对应的 overview-id
可以通过 overview-id 反查对应的 ref-id
不需要复杂的多重映射处理
这样的理解更准确吗&lt;/p&gt;
&lt;p&gt;我：
场景是这样的，新增加的 ref-id 未必会有对应的 overview-id。&lt;/p&gt;
&lt;p&gt;AI：
啊,明白了。这是一个可选的一对一关系:
映射的特点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ref-id 可以没有对应的 overview-id (可选关系)&lt;/li&gt;
&lt;li&gt;但如果有映射,则是一对一的&lt;/li&gt;
&lt;li&gt;overview-id 一定对应一个 ref-id (必需关系)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Map 表的约束:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不是所有 ref-id 都需要在 Map 表中&lt;/li&gt;
&lt;li&gt;创建映射时只需检查 overview-id 是否已被使用&lt;/li&gt;
&lt;li&gt;overview-id 不能重复使用&lt;/li&gt;
&lt;li&gt;ref-id 已有映射时,新映射会替换旧映射&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;业务场景:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新建 ref 时可以不立即创建 overview&lt;/li&gt;
&lt;li&gt;可以后续再为 ref 关联 overview&lt;/li&gt;
&lt;li&gt;可以更换 ref 对应的 overview&lt;/li&gt;
&lt;li&gt;overview 必须关联到某个 ref&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样的理解更符合实际场景了吗？&lt;/p&gt;
&lt;p&gt;我：
overview-id 一定对应一个 ref-id (必需关系) 也未必会有对应的一个 ref-id，因为有的 overview 文件不是从 ref 源文件夹中的文件创建。不过，从严格意义上来讲，一个 overview 文件，必须对应有一个 source 文件&lt;/p&gt;
&lt;p&gt;AI：
明白了,让我重新梳理这个关系:&lt;/p&gt;
&lt;p&gt;从数据库角度:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ref-id 可以没有对应的 overview-id&lt;/li&gt;
&lt;li&gt;overview-id 可以没有对应的 ref-id&lt;/li&gt;
&lt;li&gt;但如果存在映射,则是一对一的关系&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从业务逻辑角度:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;overview 文件必须对应一个 source 文件(业务规则)&lt;/li&gt;
&lt;li&gt;但这个对应关系可能还未在数据库中建立(数据状态)&lt;/li&gt;
&lt;li&gt;映射关系的建立是一个渐进的过程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Map 表的职责:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录已建立的映射关系&lt;/li&gt;
&lt;li&gt;确保映射的一对一性&lt;/li&gt;
&lt;li&gt;不强制要求所有实体都必须有映射&lt;/li&gt;
&lt;li&gt;但提供检查机制发现&amp;quot;孤立&amp;quot;的 overview&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;经过几轮对话之后，数据库所面对的场景，才真正的抽象出来。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实际开发时通过测试用例来 Debug&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于数据库设计的操作复杂，又是读又是取，又是加载又是保存，加上需要从数据库中读取数据，保存数据的函数很多。因此，按照以往，直接修改函数很容易遗漏。&lt;/p&gt;
&lt;p&gt;最佳实践是，通过测试用例，来找到还没修改和完善的地方。Emacs 自带 ert 这个测试框架，可以很完善的测试各种功能。有了测试用例配合测试，就可以非常清楚地知道问题出在哪里，直接检查对应的函数。节省了大量的时间，和精力——在 Debug 过程中，最痛苦的不是改 Bug 而是找到 Bug 的源头。&lt;/p&gt;

      </description>
      
      
      <category>write</category>
      
      
    </item>
    
    <item>
      <title>Working on improving the Hugo Theme Deck</title>
      <link>https://www.gtdstudy.com/posts/now-example/</link>
      <pubDate>Thu, 14 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtdstudy.com/posts/now-example/</guid>
      <description>&lt;p&gt;Working on improving the Hugo Theme Deck documentation and adding more example posts to demonstrate different column styles. 🚀&lt;/p&gt;

      </description>
      
      
      <category>now</category>
      
      
    </item>
    
    <item>
      <title>用 AI 辅助开发的经验二三则</title>
      <link>https://www.gtdstudy.com/posts/what-i-learned-from-using-ai-develop-software/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.gtdstudy.com/posts/what-i-learned-from-using-ai-develop-software/</guid>
      <description>&lt;h2 id=&#34;缘起&#34;&gt;缘起&lt;/h2&gt;
&lt;p&gt;2024 年的 8 月中旬, 我开始开发一个 Emacs 插件. 对 elisp 一窍不通的我, 通过 AI, 开始大家所说的 &amp;ldquo;自然语言编程&amp;rdquo;. 从那时起计算, 终于在 9 月 28 日发布了版本号为 0.3.5 的稳定版.&lt;/p&gt;
&lt;p&gt;这是我人生中, 第一次开发出, 可以稳定运行的, 可供他人使用的软件产品, 不管盈利与否, 不管是否流行, 我都觉得意义重大. 换一个角度, 作为一个开源项目， org-zettel-ref-mode 已经收获 25 个 Star, 我无论如何, 都不能把它视为一个无人问津的产品.&lt;/p&gt;
&lt;p&gt;这是我今年迈出的一小步, 后面是什么的一大步, 未来难以预料.&lt;/p&gt;
&lt;h2 id=&#34;教训经验&#34;&gt;教训/经验&lt;/h2&gt;
&lt;p&gt;初碰软件开发, 还是不管懂不懂, 顶硬上, 碰到的问题自然是非常的多. 一个 Bug 刚修完, 另外 n 个 Bug 已经准备好跳出来了. 有段时间, 不断遇到 Bug, 不禁让我发出这样的感慨: &lt;strong&gt;Bug 都是人造的，Bug 在人在，人在 Bug 在，Bug 不在人还在&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;只要人在, Bug 一定会在. 总之目前, 我的心态, 已经放平. 这最重要的一点, 以平常心面对 Bug, 以及 Bug 总是会出现的情况 &amp;ndash; Bug 是反馈的一种, 只不过刚好, 它反馈的是, 你疏忽的一面. 所以, 面对 Bug 很重要, 就好像我们面对人生中大大小小的疏忽一样.&lt;/p&gt;
&lt;p&gt;1/ 遇到一个尝试多次, 但都无法修复的 Bug, 最适合的方法, 不是重复过去. 而是, 赶紧反思, 看看之前的方法可能存在的不足, 换一个角度, 再进行尝试. 一定不要一条道走到黑.&lt;/p&gt;
&lt;p&gt;这一点很重要, 目前我为自己定的规矩是, 如果一个 Bug, 按照原来的方向, 修复 3 次, 都无法成功, 那么就不要继续原来的方法, 而是重新思考可能的方向. 简而言之: 用同一个方式修复 3 次的 Bug, 都不成功, 就必须想一个另外的方法来尝试.&lt;/p&gt;
&lt;p&gt;在 AI 的情景里, 如果总是让 AI 尝试一种方法, 会有过度聚敛的问题 &amp;ndash; 具体就是, 在你与 AI 对话到最后, AI 无论如何, 都好像在重复之前的回答. 那么, 这个时候, 就可以知道, 坚持同一个方向基本是无救的. 但是, AI 通常有尝试 10 次以上, 才会聚敛, 我们身为人类, 千万不要这么坚持, 3 次就差不多了, 该灵活时灵活.&lt;/p&gt;
&lt;p&gt;这么做, 会比较节约时间, 有益身心.&lt;/p&gt;
&lt;p&gt;2/ 遇到难解的 Bug, 如果真的不知道怎么办, 首先可以做的是, 让代码模块化.&lt;/p&gt;
&lt;p&gt;这个教训/经验, 来自切身的体会. 在 org-zettel-ref-mode 版本升级到 0.3.x 的时候, 代码行数膨胀到将近 2000 行. 难以想象, 这是一个主功能不超过 3 个的插件 [1].&lt;/p&gt;
&lt;p&gt;此时, 不能祈求添加新的功能, 能够修复之前积累的 Bug,  就谢天谢地了. Github 上, 一直有位兄弟 (此处褒义, 真心感谢这位大哥的帮忙), 孜孜不倦地帮我测试, Bug 那叫一个源源不断， 按下一个葫芦浮起好几个瓢. 夸张点说, 那段时间, 每天晚上都梦见青蛙在呱呱叫.&lt;/p&gt;
&lt;p&gt;我不得不认真地阅读源代码. 然后我发现, 很多代码, 即便是由头到脚, 都是自己设计的 (AI 不过是帮忙实现), 也读不懂了. 那一刻, 我是惊恐的, 我从未对一个人的有限, 产生过如此清晰的认识 &amp;ndash; 在这之前, 即便郑钦文拿到了奥运冠军, 内心里也不过撇了撇嘴, &amp;ldquo;如果不是老子没时间练&amp;rdquo;. 此前 Flag  立得有多么容易, 现在打脸就有多么的痛快.&lt;/p&gt;
&lt;p&gt;回到代码本身, 有一个地方, 从一开始开发这款插件, 就一直非常容易出问题. 这是一个同步的机制, 将源文件中的注释笔记, 与标记文本, 同步到另外一个笔记里. 从 0.1 到 0.2 到 0.3, 它都一直非常容易出问题. 我为此尝试过很多办法, 甚至尝试过将同步机制直接全部硬编码 &amp;ndash; 但都不太可行的. 当开发到 0.3.x 的版本, 同步机制一如既往地报错, 我不得不思考, 怎么样才能一劳永逸地解决这个问题.&lt;/p&gt;
&lt;p&gt;然后, 我尝试从现场抽离, 就是在我努力想把一切程序的行为, 都囊括到执行同步的函数里, 但都无法凑效时, 我不再只是考虑为什么函数无效的问题了. 我尝试从一个更高的维度去看这一函数, 如果函数本身真的没问题, 问题是否在函数外? 或者说, 是否本身这里面嵌套了太多 if&amp;hellip;else 所以导致逻辑的不清晰?&lt;/p&gt;
&lt;p&gt;抱着这些疑问, 我重新审阅了关于同步机制的代码, 发现它一个函数, 做了好几件事情: 识别源文件中的信息 -&amp;gt; 将识别出来的信息临时保存 -&amp;gt; 清理目标文件的内容 -&amp;gt; 将临时保存的信息保存到目标文件中去. 这其中, 识别源文件中的信息, 已经有单独的函数负责, 我后来的决定则是, 将清理目标文件的内容这一步, 也单独拎出来, 抽象成一个函数.&lt;/p&gt;
&lt;p&gt;效果拔群! 这么做之后, 首先, 同步函数变得很精炼, 每一步都非常清晰, 函数内的步骤不会相互打乱. 然后, 针对目标文件的清理, 我可以专门在一个函数里调试, 而不必管对它的改动之后, 还需要改动同步函数的其它地方.&lt;/p&gt;
&lt;p&gt;用一句很程序员的话来总结, 将副作用收敛到函数内. 经此一役, 我对编程中的 &amp;ldquo;抽象&amp;rdquo; 也有了一点小小的体会, &amp;ldquo;抽象&amp;rdquo; 真的博大精深, 值得用一生钻研.&lt;/p&gt;
&lt;p&gt;3/ 代码对象若是同一个, 则适合合并为同一个函数.&lt;/p&gt;
&lt;p&gt;还是同步函数带来的痛. 在终于领悟到, 把对目标文件的清理也抽象成为一个函数之后, 还是出现了新的 Bug &amp;ndash; 同步的内容不稳定, 一会儿这个标题在上, 一会那个标题在上, 运行多几次同步函数, 两个标题忽上忽下. 好家伙, 还没过年, 就买了俩无人机上下翻腾秀操作呢?&lt;/p&gt;
&lt;p&gt;一开始, 我以为, 是之前专门抽象的清理函数出了毛病, 老盯着它改, 翻来覆去, 没什么用. 而且, 经过测试, 函数运作得好好的, 没有毛病. 那到底是哪里出了问题呢? Debug 最痛苦的地方应该就在这里, 是已知有一只 Bug, 这只 Bug 经常出来晃晃, 不管不行, 但想找它的时候, 总不知道它哪里.&lt;/p&gt;
&lt;p&gt;重新回顾同步函数运行的步骤, 得益于之前将清理步骤单独封装成函数, 同步函数的结构很清晰, 很快我找到了导致问题的根源: 针对源文件需要同步的内容, 因为从设计上会分成 2 类, 所以我拆分了 2 个函数去定义, 同时函数里也包括了如何插入内容的步骤. 在这里, 起冲突的, 是两者插入内容的步骤, 一会儿我覆盖你, 一会儿你覆盖我, 就看函数在内存里, 谁被 CPU 先拎去执行.&lt;/p&gt;
&lt;p&gt;所以, 为什么会产生这种冲突呢? 原因是, 两个代码的对象, 实际上是同一个: 目标文件中的固定区域.&lt;/p&gt;
&lt;p&gt;以终为始, 既然如此, 那么两个函数就合并到一起: 我用另外一个函数, 将之前的 2 个函数都封装了在一起, 还将他们针对目标文件的操作从原来的函数里去掉, 然后封装到新函数中. 这个做法, 就好像专门用一辆车, 专门将人运送到固定的地点.&lt;/p&gt;
&lt;p&gt;[1] org-zettle-ref-mode 的主功能：1. 在阅读原文时， 打开另外一个名为 overview 的窗口. 2. 将笔记, 和标记文本, 同步到 overview 窗口中去. 3. 同步到 overveiw 的内容, 会自动保存为 org 笔记.&lt;/p&gt;

      </description>
      
      
      <category>write</category>
      
      
    </item>
    
  </channel>
</rss> 